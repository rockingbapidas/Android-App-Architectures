// Generated by Dagger (https://dagger.dev).
package com.bapidas.news.di.module.provide;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<Cache> cacheProvider;

  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  public NetworkModule_ProvideOkHttpClientFactory(NetworkModule module,
      Provider<Cache> cacheProvider,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    this.module = module;
    this.cacheProvider = cacheProvider;
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, cacheProvider.get(), httpLoggingInterceptorProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(NetworkModule module,
      Provider<Cache> cacheProvider,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(module, cacheProvider, httpLoggingInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(NetworkModule instance, Cache cache,
      HttpLoggingInterceptor httpLoggingInterceptor) {
    return Preconditions.checkNotNull(instance.provideOkHttpClient(cache, httpLoggingInterceptor), "Cannot return null from a non-@Nullable @Provides method");
  }
}
