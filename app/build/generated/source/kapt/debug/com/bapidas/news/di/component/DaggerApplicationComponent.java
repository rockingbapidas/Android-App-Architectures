// Generated by Dagger (https://dagger.dev).
package com.bapidas.news.di.component;

import android.app.Application;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;
import com.bapidas.news.NewsApplication;
import com.bapidas.news.NewsApplication_MembersInjector;
import com.bapidas.news.data.db.AppDatabase;
import com.bapidas.news.data.db.dao.NewsArticlesDao;
import com.bapidas.news.data.repository.NewsRepository;
import com.bapidas.news.di.module.inject.ActivityBuilderModule_ContributeMainActivity;
import com.bapidas.news.di.module.inject.ActivityBuilderModule_ContributeNewsActivity;
import com.bapidas.news.di.module.inject.ActivityBuilderModule_ContributeNewsDetailsActivity;
import com.bapidas.news.di.module.provide.ApiModule;
import com.bapidas.news.di.module.provide.ApiModule_ProvideNewsRepositoryFactory;
import com.bapidas.news.di.module.provide.NetworkModule;
import com.bapidas.news.di.module.provide.NetworkModule_ProvideCacheFactory;
import com.bapidas.news.di.module.provide.NetworkModule_ProvideGsonConverterFactoryFactory;
import com.bapidas.news.di.module.provide.NetworkModule_ProvideGsonFactory;
import com.bapidas.news.di.module.provide.NetworkModule_ProvideHttpLoggingInterceptorFactory;
import com.bapidas.news.di.module.provide.NetworkModule_ProvideOkHttpClientFactory;
import com.bapidas.news.di.module.provide.NetworkModule_ProvideRetrofitFactory;
import com.bapidas.news.di.module.provide.NetworkModule_ProvideRxJava2CallAdapterFactoryFactory;
import com.bapidas.news.di.module.provide.RoomModule;
import com.bapidas.news.di.module.provide.RoomModule_ProvidesAppDatabaseFactory;
import com.bapidas.news.di.module.provide.RoomModule_ProvidesNewsDaoFactory;
import com.bapidas.news.di.module.provide.TimberModule;
import com.bapidas.news.di.module.provide.TimberModule_ProvideTimberTreeFactory;
import com.bapidas.news.ui.base.activity.BaseActivityModule_ProvideViewModelProviderFactory;
import com.bapidas.news.ui.base.activity.BaseActivity_MembersInjector;
import com.bapidas.news.ui.base.viewmodel.BaseActivityViewModel;
import com.bapidas.news.ui.base.viewmodel.factory.ActivityViewModelFactory;
import com.bapidas.news.ui.base.viewmodel.factory.ActivityViewModelFactory_Factory;
import com.bapidas.news.ui.main.MainActivity;
import com.bapidas.news.ui.main.MainViewModel;
import com.bapidas.news.ui.main.MainViewModel_Factory;
import com.bapidas.news.ui.main.news.detail.NewsDetailViewModel;
import com.bapidas.news.ui.main.news.detail.NewsDetailViewModel_Factory;
import com.bapidas.news.ui.main.news.detail.NewsDetailsActivity;
import com.bapidas.news.ui.main.news.listing.NewsActivity;
import com.bapidas.news.ui.main.news.listing.NewsViewModel;
import com.bapidas.news.ui.main.news.listing.NewsViewModel_Factory;
import com.google.gson.Gson;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;
import timber.log.Timber;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeNewsActivity.NewsActivitySubcomponent.Factory> newsActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeNewsDetailsActivity.NewsDetailsActivitySubcomponent.Factory> newsDetailsActivitySubcomponentFactoryProvider;

  private Provider<Timber.Tree> provideTimberTreeProvider;

  private Provider<NewsApplication> applicationProvider;

  private Provider<Application> bindApplicationProvider;

  private Provider<Cache> provideCacheProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<GsonConverterFactory> provideGsonConverterFactoryProvider;

  private Provider<RxJava2CallAdapterFactory> provideRxJava2CallAdapterFactoryProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<AppDatabase> providesAppDatabaseProvider;

  private Provider<NewsArticlesDao> providesNewsDaoProvider;

  private Provider<NewsRepository> provideNewsRepositoryProvider;

  private DaggerApplicationComponent(TimberModule timberModuleParam,
      NetworkModule networkModuleParam, ApiModule apiModuleParam, RoomModule roomModuleParam,
      NewsApplication applicationParam) {

    initialize(timberModuleParam, networkModuleParam, apiModuleParam, roomModuleParam, applicationParam);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(NewsActivity.class, (Provider) newsActivitySubcomponentFactoryProvider).put(NewsDetailsActivity.class, (Provider) newsDetailsActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final TimberModule timberModuleParam,
      final NetworkModule networkModuleParam, final ApiModule apiModuleParam,
      final RoomModule roomModuleParam, final NewsApplication applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.newsActivitySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeNewsActivity.NewsActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeNewsActivity.NewsActivitySubcomponent.Factory get() {
        return new NewsActivitySubcomponentFactory();}
    };
    this.newsDetailsActivitySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeNewsDetailsActivity.NewsDetailsActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeNewsDetailsActivity.NewsDetailsActivitySubcomponent.Factory get(
          ) {
        return new NewsDetailsActivitySubcomponentFactory();}
    };
    this.provideTimberTreeProvider = DoubleCheck.provider(TimberModule_ProvideTimberTreeFactory.create(timberModuleParam));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.bindApplicationProvider = DoubleCheck.provider((Provider) applicationProvider);
    this.provideCacheProvider = DoubleCheck.provider(NetworkModule_ProvideCacheFactory.create(networkModuleParam, bindApplicationProvider));
    this.provideHttpLoggingInterceptorProvider = DoubleCheck.provider(NetworkModule_ProvideHttpLoggingInterceptorFactory.create(networkModuleParam));
    this.provideOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttpClientFactory.create(networkModuleParam, provideCacheProvider, provideHttpLoggingInterceptorProvider));
    this.provideGsonProvider = DoubleCheck.provider(NetworkModule_ProvideGsonFactory.create(networkModuleParam));
    this.provideGsonConverterFactoryProvider = DoubleCheck.provider(NetworkModule_ProvideGsonConverterFactoryFactory.create(networkModuleParam, provideGsonProvider));
    this.provideRxJava2CallAdapterFactoryProvider = DoubleCheck.provider(NetworkModule_ProvideRxJava2CallAdapterFactoryFactory.create(networkModuleParam));
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(networkModuleParam, provideOkHttpClientProvider, provideGsonConverterFactoryProvider, provideRxJava2CallAdapterFactoryProvider));
    this.providesAppDatabaseProvider = DoubleCheck.provider(RoomModule_ProvidesAppDatabaseFactory.create(roomModuleParam, bindApplicationProvider));
    this.providesNewsDaoProvider = DoubleCheck.provider(RoomModule_ProvidesNewsDaoFactory.create(roomModuleParam, providesAppDatabaseProvider));
    this.provideNewsRepositoryProvider = DoubleCheck.provider(ApiModule_ProvideNewsRepositoryFactory.create(apiModuleParam, provideRetrofitProvider, providesNewsDaoProvider));
  }

  @Override
  public void inject(NewsApplication arg0) {
    injectNewsApplication(arg0);}

  private NewsApplication injectNewsApplication(NewsApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    NewsApplication_MembersInjector.injectTimberTree(instance, provideTimberTreeProvider.get());
    return instance;
  }

  private static final class Builder implements ApplicationComponent.Builder {
    private NewsApplication application;

    @Override
    public Builder application(NewsApplication application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(application, NewsApplication.class);
      return new DaggerApplicationComponent(new TimberModule(), new NetworkModule(), new ApiModule(), new RoomModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<MainActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private Provider<Map<Class<? extends BaseActivityViewModel>, Provider<BaseActivityViewModel>>> mapOfClassOfAndProviderOfBaseActivityViewModelProvider;

    private Provider<ActivityViewModelFactory> activityViewModelFactoryProvider;

    private Provider<ViewModelProvider> provideViewModelProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.mainViewModelProvider = DoubleCheck.provider(MainViewModel_Factory.create());
      this.mapOfClassOfAndProviderOfBaseActivityViewModelProvider = MapProviderFactory.<Class<? extends BaseActivityViewModel>, BaseActivityViewModel>builder(1).put(MainViewModel.class, (Provider) mainViewModelProvider).build();
      this.activityViewModelFactoryProvider = DoubleCheck.provider(ActivityViewModelFactory_Factory.create(mapOfClassOfAndProviderOfBaseActivityViewModelProvider));
      this.provideViewModelProvider = DoubleCheck.provider(BaseActivityModule_ProvideViewModelProviderFactory.create(bindActivityProvider, (Provider) activityViewModelFactoryProvider));
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectSupportFragmentInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelProvider(instance, provideViewModelProvider.get());
      return instance;
    }
  }

  private final class NewsActivitySubcomponentFactory implements ActivityBuilderModule_ContributeNewsActivity.NewsActivitySubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeNewsActivity.NewsActivitySubcomponent create(
        NewsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new NewsActivitySubcomponentImpl(arg0);
    }
  }

  private final class NewsActivitySubcomponentImpl implements ActivityBuilderModule_ContributeNewsActivity.NewsActivitySubcomponent {
    private Provider<NewsActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<NewsViewModel> newsViewModelProvider;

    private Provider<Map<Class<? extends BaseActivityViewModel>, Provider<BaseActivityViewModel>>> mapOfClassOfAndProviderOfBaseActivityViewModelProvider;

    private Provider<ActivityViewModelFactory> activityViewModelFactoryProvider;

    private Provider<ViewModelProvider> provideViewModelProvider;

    private NewsActivitySubcomponentImpl(NewsActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NewsActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.newsViewModelProvider = DoubleCheck.provider(NewsViewModel_Factory.create(DaggerApplicationComponent.this.provideNewsRepositoryProvider));
      this.mapOfClassOfAndProviderOfBaseActivityViewModelProvider = MapProviderFactory.<Class<? extends BaseActivityViewModel>, BaseActivityViewModel>builder(1).put(NewsViewModel.class, (Provider) newsViewModelProvider).build();
      this.activityViewModelFactoryProvider = DoubleCheck.provider(ActivityViewModelFactory_Factory.create(mapOfClassOfAndProviderOfBaseActivityViewModelProvider));
      this.provideViewModelProvider = DoubleCheck.provider(BaseActivityModule_ProvideViewModelProviderFactory.create(bindActivityProvider, (Provider) activityViewModelFactoryProvider));
    }

    @Override
    public void inject(NewsActivity arg0) {
      injectNewsActivity(arg0);}

    private NewsActivity injectNewsActivity(NewsActivity instance) {
      BaseActivity_MembersInjector.injectSupportFragmentInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelProvider(instance, provideViewModelProvider.get());
      return instance;
    }
  }

  private final class NewsDetailsActivitySubcomponentFactory implements ActivityBuilderModule_ContributeNewsDetailsActivity.NewsDetailsActivitySubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeNewsDetailsActivity.NewsDetailsActivitySubcomponent create(
        NewsDetailsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new NewsDetailsActivitySubcomponentImpl(arg0);
    }
  }

  private final class NewsDetailsActivitySubcomponentImpl implements ActivityBuilderModule_ContributeNewsDetailsActivity.NewsDetailsActivitySubcomponent {
    private Provider<NewsDetailsActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<NewsDetailViewModel> newsDetailViewModelProvider;

    private Provider<Map<Class<? extends BaseActivityViewModel>, Provider<BaseActivityViewModel>>> mapOfClassOfAndProviderOfBaseActivityViewModelProvider;

    private Provider<ActivityViewModelFactory> activityViewModelFactoryProvider;

    private Provider<ViewModelProvider> provideViewModelProvider;

    private NewsDetailsActivitySubcomponentImpl(NewsDetailsActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NewsDetailsActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.newsDetailViewModelProvider = DoubleCheck.provider(NewsDetailViewModel_Factory.create());
      this.mapOfClassOfAndProviderOfBaseActivityViewModelProvider = MapProviderFactory.<Class<? extends BaseActivityViewModel>, BaseActivityViewModel>builder(1).put(NewsDetailViewModel.class, (Provider) newsDetailViewModelProvider).build();
      this.activityViewModelFactoryProvider = DoubleCheck.provider(ActivityViewModelFactory_Factory.create(mapOfClassOfAndProviderOfBaseActivityViewModelProvider));
      this.provideViewModelProvider = DoubleCheck.provider(BaseActivityModule_ProvideViewModelProviderFactory.create(bindActivityProvider, (Provider) activityViewModelFactoryProvider));
    }

    @Override
    public void inject(NewsDetailsActivity arg0) {
      injectNewsDetailsActivity(arg0);}

    private NewsDetailsActivity injectNewsDetailsActivity(NewsDetailsActivity instance) {
      BaseActivity_MembersInjector.injectSupportFragmentInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelProvider(instance, provideViewModelProvider.get());
      return instance;
    }
  }
}
